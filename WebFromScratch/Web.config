<?xml version="1.0" encoding="utf-8"?>
<!--
  Дополнительные сведения по настройке приложения ASP.NET см. по адресу:
  https://msdn.microsoft.com/ru-ru/library/ff400235(VS.100).aspx
  
  Этот файл находится впереди файла настройки приложения хоста IIS, расположенного:
  IIS
  C:\Windows\System32\inetsrv\config\applicationHost.config
  IIS Express
  C:\Users\[UserName]\Documents\IISExpress\config\applicationhost.config
  -->
<configuration>
  <appSettings>
    <!-- webpages:Version - Использовать версию Razor 3 (Смотри http://blogs.msdn.com/b/webdev/archive/2013/07/10/how-does-vs-determine-which-version-of-razor-engine-to-use-when-editing-razor-webpage-files.aspx). -->
    <add key="webpages:Version" value="3.0.0.0" />
    <!-- webpages:Enabled - Предотвращает прямую доступность к .cshtml или .vbhtml файлам в папке Views из Web браузера. Важно с точки зрения защиты. (Смотри http://stackoverflow.com/questions/4886095/what-is-the-function-of-webpagesenabled-in-mvc-3-web-config). -->
    <add key="webpages:Enabled" value="false" />
    <!-- ClientValidationEnabled - Включает валидацию данных JavaScript на стороне клиента. -->
    <add key="ClientValidationEnabled" value="true" />
    <!-- UnobtrusiveJavaScriptEnabled - Включает валидацию данных JavaScript на стороне клиента, используя jQuery. -->
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
  </appSettings>
  <connectionStrings>
    <!-- Шифрование поля connection strings: https://msdn.microsoft.com/ru-ru/library/dtkwfdky(v=vs.100).aspx . -->
  </connectionStrings>
  <system.web>
    <!--  debug                      - Определяет конфигурацию компиляции retail или debug. Параметр следует выставить в true, когда проект собирается в режиме Debug, иначе в false в режиме Release.
                                        Это делается в трансформации файла Web.Release.config 
          enablePrefetchOptimization - Использовать Windows Prefetcher (https://ru.wikipedia.org/wiki/Prefetcher), чтобы уменьшить время считывания с диска при запуске приложения.
                                        Prefetcher по умолчанию отключен в Windows Server и должен быть включён, чтобы возимело действие данного параметра
                                        ( Смотри http://www.asp.net/aspnet/overview/aspnet-and-visual-studio-2012/whats-new#_Toc_perf_6 ). 
                                        Для этого на сервере надо ввести в коммандной строке:
                                        
                                          sc config sysmain start=auto
                                          reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters" /v EnablePrefetcher /t REG_DWORD /d 2 /f
                                          reg add "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Prefetcher" /v MaxPrefetchFiles /t REG_DWORD /d 8192 /f
                                          net start sysmain
                                          
          targetFramework            - Версия .NET Framework, используемая в приложении. -->
    <compilation debug="true" enablePrefetchOptimization="true" targetFramework="4.6"/>
    
    <!--  Смотри https://www.iis.net/configreference/system.webserver/security/requestfiltering/requestlimits
          enableVersionHeader   - Убирает из заголовка ответа версию использоваемого ASP.NET. Защита по незнанию.
          executionTimeout      - Определяет максимальное позволенное колличество секунд, за которое выполняется запрос на сервер прежде, чем его прервать. 
                                    Это правило срабатывает только если у элемента compilation аттрибут debug выставлен в False. Значение по умолчанию в 110 секунд 
                                    уменьшено до 30 секунд. 
          maxQueryStringLength  - Максимальная длина строки запроса после ? (query string), измеряемая в колличестве символов. По умолчанию - 2048. Если длина превысит лимит 
                                    ASP.NET возвратит HTTP 400 (Bad Request) статус. Этот параметр для ASP.NET, но вместе с ним требуется изменить параметр IIS
                                    requestLimits maxQueryString и привести их к одному значению (Фильтрация запросов -> Изменение параметров фильтрации запросов -> Максимальная длина строки запросов). 
          maxRequestLength      - Определяет лимит запроса в KB. Лимит призван в борьбе с DDoS атакой, когда на сервер посылаются слишком большие файлы. 
                                    По умолчанию значение 4096 (4 MB) уменьшено до 1024 (1 MB). Так же следует изменить параметр requestLimits maxAllowedContentLength в IIS, 
                                    и привести их к одному значению или будет выбрано наименьше значение 
                                    (Фильтрация запросов -> Изменение параметров фильтрации запросов -> Максимальная допустимая длина содержимого).
                                    ( Смотри http://stackoverflow.com/questions/6327452/which-gets-priority-maxrequestlength-or-maxallowedcontentlength ). 
          maxUrlLength          - Максимальная длина URL, измеряемая в колличестве символов. По умолчанию - 260. Если длина URL запроса 
                                    ( https://msdn.microsoft.com/en-us/library/vstudio/system.web.httprequest.path(v=vs.100).aspx ) превысит лимит,
                                    ASP.NET возвратит HTTP 400 (Bad Request) статус. Так же следует изменить параметр requestLimits maxUrl для IIS,
                                    и привести их к одному значению (Фильтрация запросов -> Изменение параметров фильтрации запросов -> Максимальная длина URL-адреса). -->
    <httpRuntime enableVersionHeader="false" executionTimeout="30" maxQueryStringLength="2048" maxRequestLength="1024" maxUrlLength="260" targetFramework="4.6"/>
    
    <!-- mode - Тип аутентификации приложения ASP.NET. None - значение, означающее, что в приложении либо не будет, либо будет создана своя собственная система защиты.
          Смотри https://msdn.microsoft.com/ru-ru/library/aa291347(v=vs.71).aspx -->
    <authentication mode="None" />
    
    <!-- machineKey - Если сайт развёрнут в кластере или использует распределённый хостинг (shared hosting), требуется, среди прочего, создать, так называемый, 
                        машинный ключ (machine key) и ввести его ниже. Машинный ключ, например, используется для формирования маркера проверки подлинности (anti-forgery tokens).
                        Смотри https://msdn.microsoft.com/library/w8h3skw9(v=vs.100).aspx
                        Проблема, решаемая данным параметром: https://support.microsoft.com/ru-ru/kb/2915218
                        Генерирование ключа: Смотри проект MachineKeyGenerator в данном решении 
                        Шифрование поля machineKey: https://msdn.microsoft.com/ru-ru/library/dtkwfdky(v=vs.100).aspx -->
    <!--<machineKey decryptionKey="[YOUR DECRYPTION KEY GOES HERE]" 
                    validationKey="[YOUR VALIDATION KEY GOES HERE]"/>-->
    
    <!-- session    - Сессии создаются и используется всякий раз, когда используется свойство TempData в котроллерах и методах контроллера.
                        Примечания: есть определённые проблемы производительности в использовании TempData  -->
    <!-- cookieName - Устанавливает имя куки сессии ASP.NET (по умолчанию 'ASP.NET_SessionId'). -->
    <!-- timeout    - Устанавлмвает время жизни сессии, находящейся в состоянии бездействия. По умолчанию - 20 минут. Чем больше это значение, тем более вероятнее, что
                        потенциальный хакер перехватит значение. Исключением является использование SSL/TLS. -->
    <sessionState cookieName="s" timeout="20" />
  
    <!-- httpOnlyCookies - Убедиться в отсутствии доступа внешних скриптов к куки.
         requireSSL      - Передача куки только по HTTPS. -->
    <httpCookies httpOnlyCookies="true" requireSSL="false" />
  </system.web>
  <system.webServer>
     <!-- Предотвращает от перенаправления запросов IIS, происходящих при перенаправлении от адреса к директории сайта без "/" к адресу с "/". 
            То есть, например запрос к /Content будет перенаправлен к /Content/, что даёт понять хакеру строение дерева каталогов сайта.
            Смотри http://www.iis.net/configreference/system.webserver/defaultdocument и
            http://www.troyhunt.com/2014/09/solving-tyranny-of-http-403-responses.html -->
    <defaultDocument enabled="false" />
  </system.webServer>
  <system.codedom>
    <compilers>
      <compiler language="c#;cs;csharp" extension=".cs"
        type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        warningLevel="4" compilerOptions="/langversion:6 /nowarn:1659;1699;1701"/>
      <compiler language="vb;vbs;visualbasic;vbscript" extension=".vb"
        type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        warningLevel="4" compilerOptions="/langversion:14 /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+"/>
    </compilers>
  </system.codedom>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35"/>
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35"/>
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35"/>
        <bindingRedirect oldVersion="1.0.0.0-5.2.3.0" newVersion="5.2.3.0"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>