<?xml version="1.0" encoding="utf-8"?>
<!--
  Дополнительные сведения по настройке приложения ASP.NET см. по адресу:
  https://msdn.microsoft.com/ru-ru/library/ff400235(VS.100).aspx
  
  Этот файл находится впереди файла настройки приложения хоста IIS, расположенного:
  IIS
  C:\Windows\System32\inetsrv\config\applicationHost.config
  IIS Express
  C:\Users\[UserName]\Documents\IISExpress\config\applicationhost.config
  -->
<configuration>
  <configSections>
    <sectionGroup name="nwebsec">
      <!-- Для информации по настройке NWebsec смотри: https://docs.nwebsec.com/ -->
      <section name="httpHeaderSecurityModule" type="NWebsec.Modules.Configuration.HttpHeaderSecurityConfigurationSection, NWebsec, Version=4.2.0.0, Culture=neutral, PublicKeyToken=3613da5f958908a1" requirePermission="false" />
    </sectionGroup>
  </configSections>
  <appSettings>
    <!-- webpages:Version - Использовать версию Razor 3 (Смотри http://blogs.msdn.com/b/webdev/archive/2013/07/10/how-does-vs-determine-which-version-of-razor-engine-to-use-when-editing-razor-webpage-files.aspx). -->
    <add key="webpages:Version" value="3.0.0.0" />
    <!-- webpages:Enabled - Предотвращает прямую доступность к .cshtml или .vbhtml файлам в папке Views из Web браузера. Важно с точки зрения защиты. (Смотри http://stackoverflow.com/questions/4886095/what-is-the-function-of-webpagesenabled-in-mvc-3-web-config). -->
    <add key="webpages:Enabled" value="false" />
    <!-- ClientValidationEnabled - Включает валидацию данных JavaScript на стороне клиента. -->
    <add key="ClientValidationEnabled" value="true" />
    <!-- UnobtrusiveJavaScriptEnabled - Включает валидацию данных JavaScript на стороне клиента, используя jQuery. -->
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
  </appSettings>
  <connectionStrings>
    <!-- Шифрование поля connection strings: https://msdn.microsoft.com/ru-ru/library/dtkwfdky(v=vs.100).aspx . -->
  </connectionStrings>
  <system.web>
    <!--  debug                      - Определяет конфигурацию компиляции retail или debug. Параметр следует выставить в true, когда проект собирается в режиме Debug, иначе в false в режиме Release.
                                        Это делается в трансформации файла Web.Release.config 
          enablePrefetchOptimization - Использовать Windows Prefetcher (https://ru.wikipedia.org/wiki/Prefetcher), чтобы уменьшить время считывания с диска при запуске приложения.
                                        Prefetcher по умолчанию отключен в Windows Server и должен быть включён, чтобы возимело действие данного параметра
                                        ( Смотри http://www.asp.net/aspnet/overview/aspnet-and-visual-studio-2012/whats-new#_Toc_perf_6 ). 
                                        Для этого на сервере надо ввести в коммандной строке:
                                        
                                          sc config sysmain start=auto
                                          reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters" /v EnablePrefetcher /t REG_DWORD /d 2 /f
                                          reg add "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Prefetcher" /v MaxPrefetchFiles /t REG_DWORD /d 8192 /f
                                          net start sysmain
                                          
          targetFramework            - Версия .NET Framework, используемая в приложении. -->
    <compilation debug="true" enablePrefetchOptimization="true" targetFramework="4.6" />
    <!--  Смотри https://www.iis.net/configreference/system.webserver/security/requestfiltering/requestlimits
          enableVersionHeader   - Убирает из заголовка ответа версию использоваемого ASP.NET (X-AspNet-Version). Защита по незнанию.
          executionTimeout      - Определяет максимальное позволенное колличество секунд, за которое выполняется запрос на сервер прежде, чем его прервать. 
                                    Это правило срабатывает только если у элемента compilation аттрибут debug выставлен в False. Значение по умолчанию в 110 секунд 
                                    уменьшено до 30 секунд. 
          maxQueryStringLength  - Максимальная длина строки запроса после ? (query string), измеряемая в колличестве символов. По умолчанию - 2048. Если длина превысит лимит 
                                    ASP.NET возвратит HTTP 400 (Bad Request) статус. Этот параметр для ASP.NET, но вместе с ним требуется изменить параметр IIS
                                    requestLimits maxQueryString и привести их к одному значению. 
          maxRequestLength      - Определяет лимит запроса в KB. Лимит призван в борьбе с DDoS атакой, когда на сервер посылаются слишком большие файлы. 
                                    По умолчанию значение 4096 (4 MB) уменьшено до 1024 (1 MB). Так же следует изменить параметр requestLimits maxAllowedContentLength в IIS, 
                                    и привести их к одному значению или будет выбрано наименьше значение.
                                    ( Смотри http://stackoverflow.com/questions/6327452/which-gets-priority-maxrequestlength-or-maxallowedcontentlength ). 
          maxUrlLength          - Максимальная длина URL, измеряемая в колличестве символов. По умолчанию - 260. Если длина URL запроса 
                                    ( https://msdn.microsoft.com/en-us/library/vstudio/system.web.httprequest.path(v=vs.100).aspx ) превысит лимит,
                                    ASP.NET возвратит HTTP 400 (Bad Request) статус. Так же следует изменить параметр requestLimits maxUrl для IIS,
                                    и привести их к одному значению. -->
    <httpRuntime enableVersionHeader="false" executionTimeout="30" maxQueryStringLength="2048" maxRequestLength="1024" maxUrlLength="260" targetFramework="4.6" />
    <!-- mode - Тип аутентификации приложения ASP.NET. None - значение, означающее, что в приложении либо не будет, либо будет создана своя собственная система защиты.
          Смотри https://msdn.microsoft.com/ru-ru/library/aa291347(v=vs.71).aspx -->
    <authentication mode="None" />
    <!-- machineKey - Если сайт развёрнут в кластере или использует распределённый хостинг (shared hosting), требуется, среди прочего, создать, так называемый, 
                        машинный ключ (machine key) и ввести его ниже. Машинный ключ, например, используется для формирования маркера проверки подлинности (anti-forgery tokens).
                        Смотри https://msdn.microsoft.com/library/w8h3skw9(v=vs.100).aspx
                        Проблема, решаемая данным параметром: https://support.microsoft.com/ru-ru/kb/2915218
                        Генерирование ключа: Смотри проект MachineKeyGenerator в данном решении 
                        Шифрование поля machineKey: https://msdn.microsoft.com/ru-ru/library/dtkwfdky(v=vs.100).aspx -->
    <!--<machineKey decryptionKey="[YOUR DECRYPTION KEY GOES HERE]" 
                    validationKey="[YOUR VALIDATION KEY GOES HERE]"/>-->
    <!-- session    - Сессии создаются и используется всякий раз, когда используется свойство TempData в котроллерах и методах контроллера.
                        Примечания: есть определённые проблемы производительности в использовании TempData  -->
    <!-- cookieName - Устанавливает имя куки сессии ASP.NET (по умолчанию 'ASP.NET_SessionId'). -->
    <!-- timeout    - Устанавлмвает время жизни сессии, находящейся в состоянии бездействия. По умолчанию - 20 минут. Чем больше это значение, тем более вероятнее, что
                        потенциальный хакер перехватит значение. Исключением является использование SSL/TLS. -->
    <sessionState cookieName="s" timeout="20" />
    <!-- httpOnlyCookies - Убедиться в отсутствии доступа внешних скриптов к куки.
         requireSSL      - Передача куки только по HTTPS. -->
    <httpCookies httpOnlyCookies="true" requireSSL="true" />
    <!-- mode - Включить ли свою обработку ошибок сервера. -->
    <customErrors mode="Off" />
    <!-- Настройка кэширования -->
    <!-- Кэширование ajax Смотри http://weblogs.asp.net/cibrax/hacking-the-browser-cache-with-jquery-and-asp-net-mvc -->
    <!-- Дополнительно о кэшировании здесь https://msdn.microsoft.com/en-us/library/aa478965.aspx -->
    <caching>
      <outputCacheSettings>
        <!-- outputCacheSettings - Создание профилей кэширования, которые будут применены к методам контроллера. 
             duration            - Колличество секунд кэширования
             varyByParam         - Какой параметр запрса будет отвечать за отличие одного Url от другого. Разделять имена параметров следует при помощи ";"
                                    none - все запросы к методу кэшируются, вне зависимости от параметров запроса
                                    "*"  - Каждый отличный от другого набор параметров считается за другой Url 
             varyByHeader	       - Url различаются по значению указанного заголовка.
             varyByCustom	       - Позволяет определить свой параметр в global.asax (например, "Browser").-->
        <outputCacheProfiles>
          <!-- ### Error ### -->
          
          <!-- Закэшировать 400 Bad Request маршрут на 1 день. -->
          <add name="BadRequest" duration="86400" location="Any" varyByParam="none" />
          <!-- Закэшировать 403 Forbidden маршрут на 1 день. -->
          <add name="Forbidden" duration="86400" location="Any" varyByParam="none" />
          <!-- Закэшировать 405 Method Not Allowed маршрут на 1 день. -->
          <add name="MethodNotAllowed" duration="86400" location="Any" varyByParam="none" />
          <!-- Закэшировать 404 Not Found маршрут на 1 день. -->
          <add name="NotFound" duration="86400" location="Any" varyByParam="none" />
          <!-- Закэшировать 401 Unauthorized маршрут на 1 день. -->
          <add name="Unauthorized" duration="86400" location="Any" varyByParam="none" />
          <!-- Закэшировать 500 Internal Server Error маршрут на 1 день. -->
          <add name="InternalServerError" duration="86400" location="Any" varyByParam="none" />

          <!-- ### Home ### -->
          
          <!-- Закэшировать manifest.json маршрут на 1 день. -->
          <add name="ManifestJson" duration="86400" location="Any" varyByParam="none" />
          <!-- Закэшировать browserconfig.xml маршрут на 1 день. -->
          <add name="BrowserConfigXml" duration="86400" location="Any" varyByParam="none" />
        </outputCacheProfiles>
      </outputCacheSettings>
    </caching>
    <httpModules>
      <add name="ApplicationInsightsWebTracking" type="Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule, Microsoft.AI.Web" />
    </httpModules>
    <!-- Трейсинг по адресу /trace.axd -->
    <trace enabled="true" pageOutput="false" traceMode="SortByTime" localOnly="false"/>
  </system.web>
  <system.webServer>
    <modules>
      <remove name="FormsAuthentication" />
      <!-- Регистрация модуля, убирающего заголовок Server-->
      <add name="CustomHeaderModule" type="WebFromScratch.HttpModules.RemoveServerResponseHeader"></add>
      <remove name="ApplicationInsightsWebTracking" />
      <add name="ApplicationInsightsWebTracking" type="Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule, Microsoft.AI.Web" preCondition="managedHandler" />
      <add name="NWebsecHttpHeaderSecurityModule" type="NWebsec.Modules.HttpHeaderSecurityModule, NWebsec, Version=4.2.0.0, Culture=neutral, PublicKeyToken=3613da5f958908a1" />
    </modules>
    <handlers>
      <!-- ExtensionlessUrlHandler + OPTIONSVerbHandler +TRACEVerbHandler - Исправление ошибок, связанных с обработкой http методов отличных от get и post
            Смотри: https://dzone.com/articles/configuring-iis-methods-aspnet -->
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <remove name="OPTIONSVerbHandler" />
      <remove name="TRACEVerbHandler" />
      <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
      <!-- По умолчанию все запросы, заканчивающиеся расширением файла считаются запросами к локальным файлам.
              Если же нужно переопределить данное поведение, то прописывать здесь правила -->
      <add name="ManifestJson" path="manifest.json" verb="GET" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
      <add name="BrowserConfigXml" path="browserconfig.xml" verb="GET" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0"/>
    </handlers>
    <!-- Предотвращает от перенаправления запросов IIS, происходящих при перенаправлении от адреса к директории сайта без "/" к адресу с "/". 
            То есть, например запрос к /Content будет перенаправлен к /Content/, что даёт понять хакеру строение дерева каталогов сайта.
            Смотри http://www.iis.net/configreference/system.webserver/defaultdocument и
            http://www.troyhunt.com/2014/09/solving-tyranny-of-http-403-responses.html -->
    <defaultDocument enabled="false" />
    <!-- Страницы обработки ошибок. Смотри https://support.microsoft.com/en-us/kb/943891 -->
    <!-- existingResponse - Включение показа страниц обработок ошибок сервера
                            PassThrough - Позволить деббагеру MVC показывать страницу с полным описанием ошибки
                            Replace - Заменять все ответы с ошибкой на созданные обработчики. -->
    <httpErrors errorMode="Custom" existingResponse="PassThrough">
      <!--Перенаправление IIS 400 Bad Request ответов на error контроллер bad request метод.-->
      <remove statusCode="400" />
      <error statusCode="400" responseMode="ExecuteURL" path="/error/badrequest/" />
      <!--Перенаправление IIS 401 Unauthorized ответов на error контроллер unauthorized метод.-->
      <remove statusCode="401" />
      <error statusCode="401" responseMode="ExecuteURL" path="/error/unauthorized/" />
      <remove statusCode="403" />
      <!--Перенаправить IIS 403.14 Forbidden ответ на error контроллер not found метод. 
           403.14 появляктся при попытке получить доступ к существуюшей папке без прав её просмотра
           Смотри http://www.troyhunt.com/2014/09/solving-tyranny-of-http-403-responses.html -->
      <error statusCode="403" subStatusCode="14" responseMode="ExecuteURL" path="/error/notfound/" />
      <!--Перенаправить IIS 403.501 и 403.502 Forbidden ответы на статичную Forbidden страницу.
           Обычно случается при Denial of Service (DoS) аттаке на сайт.
           Смотри http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-dynamic-ip-address-restrictions -->
      <error statusCode="403" subStatusCode="501" responseMode="File" path="error\forbidden.html" />
      <error statusCode="403" subStatusCode="502" responseMode="File" path="error\forbidden.html" />
      <!--Перенаправление IIS 403 Forbidden ответа на error контроллер forbidden метод.-->
      <error statusCode="403" responseMode="ExecuteURL" path="/error/forbidden/" />
      <!--Перенаправление IIS 404 Not Found ответа на error контроллер not found метод.-->
      <remove statusCode="404" />
      <error statusCode="404" responseMode="ExecuteURL" path="/error/notfound/" />
      <!--Перенаправление IIS 405 Method Not Allowed ответа на error контроллер method not allowed метод.-->
      <remove statusCode="405" />
      <error statusCode="405" responseMode="ExecuteURL" path="/error/methodnotallowed/" />
      <remove statusCode="500" />
      <!--Перенаправление IIS 500.13 Internal Server Error ответа на статичную Service Unavailable страницу.
           500.13 возникает в связи с высокой загруженностью сайта. Количество трафика превысило возможности сайта. -->
      <error statusCode="500" subStatusCode="13" responseMode="File" path="error\serviceunavailable.html" />
      <!--Перенаправление IIS 500 Internal Server Error  ответа на error контроллер internal server error метод.-->
      <error statusCode="500" responseMode="ExecuteURL" path="/error/internalservererror/" />
      <!--Перенаправление IIS 503 Service Unavailable ответа на статичную Service Unavailable страницу.-->
      <remove statusCode="503" />
      <error statusCode="503" responseMode="File" path="error\serviceunavailable.html" />
      <!--Перенаправление IIS 504 Gateway Timeout ответа на статичную Gateway Timeout страницу.-->
      <remove statusCode="504" />
      <error statusCode="504" responseMode="File" path="error\gatewaytimeout.html" />
    </httpErrors>
    <httpProtocol>
      <customHeaders>
        <!-- X-Powered-By - Убрать заголовки X-Powered-By. Защита по незнанию. -->
        <clear />
        <!-- X-UA-Compatible - Убедиться, что IE и Chrome фреймы будут использрвать последние режимы совместимости. Так же, можно использовать HTML meta тег X-UA-Compatible "IE=edge" -->
        <add name="X-UA-Compatible" value="IE=edge,chrome=1" />
      </customHeaders>
    </httpProtocol>
    <staticContent>
      <!-- clientCache - Включить кэширование на клиентской стороне статичных данных. По умолчанию каждому статичному файлу соответствует свой ETag - отпечаток.
           Смотри http://www.iis.net/configreference/system.webserver/staticcontent/clientcache 
           cacheControlCustom         - Установить Cache-Control HTTP заголовок в public, таким образом делая возможным браузерам и прокси кэшировать содержимое. 
           cacheControlMode=UseMaxAge - Добавляет Cache-Control: max-age=<nnn> в заголовок, основанный на значении CacheControlMaxAge.
           cacheControlMaxAge         - Установить кэширование на год. 
           setEtag=false              - Указать, что заголовок HTTP ETag не используется. Вместо него использовать Last-Modified. ETag и Last-Modified используются для определения изменения данных.
           Примечание: Если версия IIS < 8, то следует добавить в customHeaders <add name="ETag" value=""/> и удалить setEtag от сюда. -->
      <clientCache cacheControlCustom="public" cacheControlMode="UseMaxAge" cacheControlMaxAge="365.00:00:00" setEtag="false" />
      <!-- ### MIME типы ### -->
      <!-- .js - JavaScript обрабатываются как application/x-javascript в IIS 7.5 и ниже. Смотри http://stackoverflow.com/questions/9664282/difference-between-application-x-javascript-and-text-javascript-content-types. -->
      <remove fileExtension=".js" />
      <mimeMap fileExtension=".js" mimeType="application/javascript" />
      <!-- .json - IIS не имеет по умолчанию JSON MIME тип. -->
      <remove fileExtension=".json" />
      <mimeMap fileExtension=".json" mimeType="application/json" />
      <!-- .rss - IIS не имеет по умолчанию RSS MIME тип. Смотри http://www.rssboard.org/rss-mime-type-application.txt. -->
      <remove fileExtension=".rss" />
      <mimeMap fileExtension=".rss" mimeType="application/rss+xml; charset=UTF-8" />
      <!-- .html - Добавлено набор символов по умолчанию. -->
      <remove fileExtension=".html" />
      <mimeMap fileExtension=".html" mimeType="text/html; charset=UTF-8" />
      <!-- .xml - Добавлено набор символов по умолчанию. -->
      <remove fileExtension=".xml" />
      <mimeMap fileExtension=".xml" mimeType="application/xml; charset=UTF-8" />
      <!-- HTML5 Video - IIS 7.5 не имеет по умолчанию эти MIME типы. -->
      <remove fileExtension=".mp4" />
      <mimeMap fileExtension=".mp4" mimeType="video/mp4" />
      <remove fileExtension=".m4v" />
      <mimeMap fileExtension=".m4v" mimeType="video/m4v" />
      <remove fileExtension=".ogg" />
      <mimeMap fileExtension=".ogg" mimeType="video/ogg" />
      <remove fileExtension=".ogv" />
      <mimeMap fileExtension=".ogv" mimeType="video/ogg" />
      <remove fileExtension=".webm" />
      <mimeMap fileExtension=".webm" mimeType="video/webm" />
      <!-- HTML5 Audio - IIS 7.5 не имеет по умолчанию эти MIME типы. -->
      <remove fileExtension=".oga" />
      <mimeMap fileExtension=".oga" mimeType="audio/ogg" />
      <remove fileExtension=".spx" />
      <mimeMap fileExtension=".spx" mimeType="audio/ogg" />
      <!-- .svgz - IIS 7.5 не имеет по умолчанию сжатый SVG MIME тип. -->
      <remove fileExtension=".svgz" />
      <mimeMap fileExtension=".svgz" mimeType="image/svg+xml" />
      <!-- Web Fonts -->
      <!-- .eot - Обрабатывается как application/octet-stream. Изменено на application/vnd.ms-fontobject. -->
      <remove fileExtension=".eot" />
      <mimeMap fileExtension=".eot" mimeType="application/vnd.ms-fontobject" />
      <!-- .ttf - Обрабатывается как application/octet-stream. Изменено на application/application/x-font-ttf. -->
      <remove fileExtension=".ttf" />
      <mimeMap fileExtension=".ttf" mimeType="application/x-font-ttf" />
      <!-- .ttc - IIS не имеет по умолчанию TTC MIME тип. -->
      <remove fileExtension=".ttc" />
      <mimeMap fileExtension=".ttc" mimeType="application/x-font-ttf" />
      <!-- .otf - IIS не имеет по умолчанию OTF MIME тип. -->
      <remove fileExtension=".otf" />
      <mimeMap fileExtension=".otf" mimeType="font/otf" />
      <!-- .woff - Обрабатывается как font/woff. Изменено на application/font-woff. -->
      <remove fileExtension=".woff" />
      <mimeMap fileExtension=".woff" mimeType="application/font-woff" />
      <!-- .woff2 - IIS не имеет по умолчанию WOFF2 MIME тип. -->
      <remove fileExtension=".woff2" />
      <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
      <!-- .webp - IIS не имеет по умолчанию WEBP MIME тип. -->
      <remove fileExtension=".webp" />
      <mimeMap fileExtension=".webp" mimeType="image/webp" />
      <!-- .appcache - IIS не имеет по умолчанию appcache MIME тип. -->
      <remove fileExtension=".appcache" />
      <mimeMap fileExtension=".appcache" mimeType="text/cache-manifest" />
      <!-- .manifest - IIS не имеет по умолчанию manifest MIME тип. -->
      <remove fileExtension=".manifest" />
      <mimeMap fileExtension=".manifest" mimeType="text/cache-manifest" />
    </staticContent>
    <!-- httpCompression - GZip сжатие статичного контента. Перезаписывает начальные настройки сервера на сжатие файлов по размеру превышающих 2700 bytes.
         Смотри http://zoompf.com/blog/2012/02/lose-the-wait-http-compression и
         http://www.iis.net/configreference/system.webserver/httpcompression -->
    <!-- minFileSizeForComp - Минимальный размер файла для сжатия. -->
    <httpCompression directory="%SystemDrive%\inetpub\temp\IIS Temporary Compressed Files" minFileSizeForComp="1024">
      <scheme name="gzip" dll="%Windir%\system32\inetsrv\gzip.dll" />
      <!-- Настройка сжатия динамического контента -->
      <dynamicTypes>
        <add mimeType="text/*" enabled="true" />
        <add mimeType="message/*" enabled="true" />
        <!-- Сжимать JavaScript -->
        <add mimeType="application/x-javascript" enabled="true" />
        <!-- Сжимать XML файлы -->
        <add mimeType="application/xml" enabled="true" />
        <!-- Сжимать JavaScript файлы -->
        <add mimeType="application/javascript" enabled="true" />
        <!-- Сжимать JSON файлы -->
        <add mimeType="application/json" enabled="true" />
        <!-- Сжимать SVG файлы -->
        <add mimeType="image/svg+xml" enabled="true" />
        <!-- Сжимать RSS -->
        <add mimeType="application/rss+xml" enabled="true" />
        <!-- Сжимать Atom -->
        <add mimeType="application/atom+xml" enabled="true" />

        <add mimeType="*/*" enabled="false" />
      </dynamicTypes>
      <staticTypes>
        <add mimeType="text/*" enabled="true" />
        <add mimeType="message/*" enabled="true" />
        <add mimeType="application/x-javascript" enabled="true" />
        <add mimeType="application/atom+xml" enabled="true" />
        <add mimeType="application/xaml+xml" enabled="true" />

        <!-- Сжимать ICO файлы иконок (Примечание: некоторые .ico файлы содержат PNG сжатие изображений. В этом случае следует удалить эту строку). -->
        <add mimeType="image/x-icon" enabled="true" />
        <!-- Сжимать XML файлы -->
        <add mimeType="application/xml" enabled="true" />
        <add mimeType="application/xml; charset=UTF-8" enabled="true" />
        <!-- Сжимать JavaScript файлы -->
        <add mimeType="application/javascript" enabled="true" />
        <!-- Сжимать JSON файлы -->
        <add mimeType="application/json" enabled="true" />
        <!-- Сжимать SVG файлы -->
        <add mimeType="image/svg+xml" enabled="true" />
        <!-- Сжимать EOT файлы шрифтов -->
        <add mimeType="application/vnd.ms-fontobject" enabled="true" />
        <!-- Сжимать TTF файлы шрифтов -->
        <!-- Или application/font-ttf, IIS вроде использует application/x-font-ttf. -->
        <!--<add mimeType="application/font-ttf" enabled="true" />-->
        <add mimeType="application/x-font-ttf" enabled="true" />
        <!-- Сжимать OTF файлы шрифтов -->
        <!-- Или application/font-opentype, IIS вроде использует font/otf. -->
        <!--<add mimeType="application/font-opentype" enabled="true" />-->
        <add mimeType="font/otf" enabled="true" />
        <!-- Сжимать RSS -->
        <add mimeType="application/rss+xml" enabled="true" />
        <add mimeType="application/rss+xml; charset=UTF-8" enabled="true" />

        <add mimeType="*/*" enabled="false" />
      </staticTypes>
    </httpCompression>
    <!-- Включить gzip и настроить HTTP компрессию. Смотри http://www.iis.net/configreference/system.webserver/urlcompression
         doDynamicCompression          - Включить сжатие динамического контента.
         doStaticCompression           - Включить сжатие статичного контента. 
         dynamicCompressionBeforeCache - Включить сжатие перед кэшированием. 
                                         Примечание: в режиме Debug отключено, чтобы Browser Link смог работать.
                                         В Release режиме включено (Смотри web.Release.config).-->
    <urlCompression doDynamicCompression="true" doStaticCompression="true" dynamicCompressionBeforeCache="false" />
    <validation validateIntegratedModeConfiguration="false" />
    <security>
      <!-- Включает динамическую защиту по айпи. При Отказе сервиса (DoS), будет показана 403.501 и 403.502 Forbidden статичные странички. 
            Подробно: http://www.iis.net/configreference/system.webserver/security/dynamicipsecurity
            enableLoggingOnlyMode - Будет вестись только логгирование, без отказа, таким образом, можно выставить
                                      праметры более точно. Пример: Google и Bing делают очень много запросов временами
                                      и может выглядеть как DoS атака. -->
      <dynamicIpSecurity enableLoggingOnlyMode="true">
        <!-- maxRequests                   - Количество запросов в промежуток времени с одного айпи до того как блокировать 
             requestIntervalInMilliseconds - Промежуток времени в миллисекундах -->
        <denyByRequestRate enabled="true" maxRequests="30" requestIntervalInMilliseconds="300"/>
        <!-- maxConcurrentRequests         - Количество одновременных запросов до того как блокировать -->
        <denyByConcurrentRequests enabled="true" maxConcurrentRequests="20"/>       
      </dynamicIpSecurity>
      <requestFiltering>
        <hiddenSegments>
          <add segment="NWebsecConfig" />
        </hiddenSegments>
        <!-- maxAllowedContentLength  -  Определяет лимит запроса в байтах. Лимит призван в борьбе с DDoS атакой, когда на сервер посылаются слишком большие файлы. 
                                             По умолчанию значение 30000000 (~28.6 MB) уменьшено до 1048576 (1 MB). Так же следует изменить параметр httpRuntime maxRequestLength для ASP.NET, 
                                             и привести их к одному значению или будет выбрано наименьше значение.
                                             ( Смотри http://stackoverflow.com/questions/6327452/which-gets-priority-maxrequestlength-or-maxallowedcontentlength ). -->
        <!-- maxQueryString           - Максимальная длина строки запроса после ? (query string), измеряемая в колличестве символов. По умолчанию - 2048. Если длина превысит лимит 
                                             ASP.NET возвратит HTTP 400 (Bad Request) статус. Этот параметр для IIS, но вместе с ним требуется изменить параметр ASP.NET
                                             httpRuntime maxQueryStringLength и привести их к одному значению.  -->
        <!-- maxUrl                   - Максимальная длина URL, измеряемая в колличестве байт. По умолчанию - 4096. Если длина URL запроса 
                                             ( https://msdn.microsoft.com/en-us/library/vstudio/system.web.httprequest.path(v=vs.100).aspx ) превысит лимит,
                                             ASP.NET возвратит HTTP 400 (Bad Request) статус. Так же следует изменить параметр httpRuntime maxUrlLength для ASP.NET,
                                             и привести их к одному значению. -->
        <requestLimits maxAllowedContentLength="1048576" maxQueryString="2048" maxUrl="4096" />
      </requestFiltering>
    </security>
  </system.webServer>
  <system.codedom>
    <compilers>
      <compiler language="c#;cs;csharp" extension=".cs" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:6 /nowarn:1659;1699;1701" />
      <compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" warningLevel="4" compilerOptions="/langversion:14 /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+" />
    </compilers>
  </system.codedom>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <nwebsec>
    <!-- https://securityheaders.io - сайт для проверки настроек заголовков защиты -->
    <httpHeaderSecurityModule xmlns="http://nwebsec.com/HttpHeaderSecurityModuleConfig.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="NWebsecConfig/HttpHeaderSecurityModuleConfig.xsd">
      <!-- Настройка защиты от перенаправлений сайта на другие адреса, подробно: https://docs.nwebsec.com/en/4.2/nwebsec/Redirect-validation.html -->
      <redirectValidation enabled="true">
        <!-- Разрешить перенаправление на свой сайт, но с другим портом: https -->
        <allowSameHostRedirectsToHttps enabled="true" />
      </redirectValidation>
      <!-- Настройка заголовков безопасности, подробно: http://www.dotnetnoob.com/2012/09/security-through-http-response-headers.html -->
      <securityHttpHeaders>
        <!-- Заголовок, указывающий, что сайт нельзя отображать в iframe, подробно: https://docs.nwebsec.com/en/4.2/nwebsec/Configuring-xfo.html -->
        <x-Frame-Options policy="Deny" />
        <!-- Заголовок, указывающий, что нет необходимости автоматически определять Content-Type браузеру, а необходимо использовать уже отданный content-type, подробно https://docs.nwebsec.com/en/4.2/nwebsec/Configuring-cto.html -->
        <x-Content-Type-Options enabled="true" />
        <!-- Заголовок, указывающий, что надо грузить весь контент через https и выдавать ошибку при ошибке сертификата, подробно: https://docs.nwebsec.com/en/4.2/nwebsec/Configuring-hsts.html -->
        <strict-Transport-Security max-age="365" includeSubdomains="true" preload="true" />
        <!-- подробно тут: https://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives -->
        <content-Security-Policy enabled="true">
          <!-- Заголовок, указывающий, что все объекты на странице использующие HTTP автоматически повышаются до HTTPS. -->
          <upgrade-insecure-requests enabled="true" />
          <!-- Логирование нарушений CSP 
                Используется внутренний перехватчик сообщений NWebSec, так как внешний url для отчётов требовал бы незащищённый путь 
                Подробно: https://docs.nwebsec.com/en/4.2/nwebsec/Configuring-csp.html#the-built-in-report-handler 
                Обработчик события находится в global.asax метод NWebsecHttpHeaderSecurityModule_CspViolationReported() -->
          <report-uri enableBuiltinHandler="true"></report-uri>
          <!-- Значение по умолчанию для остальных директив-->
          <default-src enabled="true" none="true"></default-src>
          <!-- Ресурсы для уоторых разрешено обращению к document baseUrl-->
          <base-uri enabled="true" self="false"></base-uri>
          <!-- Дочерние ресурсы, такие как фреймы, Worker -->
          <child-src enabled="true" self="false"></child-src>
          <!-- Родительские ресурсы обращающиеся к сайту через iframe, frame, object, embed, applet -->
          <frame-ancestors enabled="true" self="false"></frame-ancestors>
          <!-- Адреса к которым можно подключаться (AJAX и Web Sockets)-->
          <connect-src enabled="true" self="true">
            <!-- Только для Browserlink в режиме debug -->
            <add source="localhost:*"/>
            <add source="wss://localhost:*"/>
          </connect-src>
          <!-- Адреса, в которые можно отправлять сабмиты -->
          <form-action enabled="true" self="true"></form-action>
          <!-- Адреса, с которых можно скачивать шрифты -->
          <font-src enabled="true" self="true">
            <add source="https://fonts.gstatic.com" />
          </font-src>
          <!-- Адреса, с которых можно скачивать стили -->
          <style-src enabled="true" self="true" unsafeInline="true">
            <add source="https://fonts.googleapis.com" />
          </style-src>
          <!-- Адреса, с которых можно скачивать скрипты -->
          <script-src enabled="true" self="true" unsafeEval="false" unsafeInline="false">
            <add source="https://ajax.googleapis.com"></add>
            <add source="localhost:*"/>
          </script-src>
          <img-src enabled="true" self="true">
            <!-- Только для Browserlink в режиме debug -->
            <add source="data:"/>
          </img-src>
          <!-- Адреса, с которых можно скачивать музыку и видео -->
          <media-src enabled="true" self="false"></media-src>
          <!-- Адреса, с которых можно скачивать плагины -->
          <!-- Для вставки плагина использовать @Html.CspMediaType("application/pdf") -->
          <object-src enabled="true" self="false"></object-src>
        </content-Security-Policy>
        <!-- Заголовок, помогающий в борьбе с XSS  -->
        <x-XSS-Protection blockMode="true" policy="FilterEnabled" />
      </securityHttpHeaders>
    </httpHeaderSecurityModule>
  </nwebsec>
</configuration>